// ============================================================================
// Forms
// ============================================================================

// Variables
// ----------------------------------------------------------------------------

// Inputs
// Make inputs at least the height of their button counterpart
$input-height:                  $leading + u(($padding-vert-base * 2) + 2, rem) !default;
$input-bg:                      white !default;
$input-bg-disabled:             $gray-lighter !default;

$input-color:                   $gray !default;
$input-color-placeholder:       $gray-light !default;

$input-border-color:            lighten($gray-light, 25%) !default;
$input-border-radius:           0 !default;
$input-border-size:             1px !default;
$input-border-focus:            $color-primary !default;

$input-box-shadow:              inset 0 1px 3px rgba(black, .075);

$form-horiz-label-width:        12em;

// Mixins
// ----------------------------------------------------------------------------

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
  // Color the label and help text
  label,
  .form-help {
    color: $text-color;
  }

  // Set the border and box shadow on specific inputs to match
  .control {
    box-shadow: inset 0 1px 1px rgba(black, .075); // Redeclare so transitions work
    border-color: $border-color;

    &:focus {
      box-shadow: inset 0 1px 1px rgba(black, .075) 0 0 6px lighten($border-color, 20%);
      border-color: darken($border-color, 10%);
    }
  }

  // Optional feedback icon
  .form-control-feedback {
    color: $text-color;
  }
}

// Form elements
// ----------------------------------------------------------------------------

fieldset {
  border: 0;
  margin: 0;
  padding: ($leading / 2) 0;
}

legend {
  border: 0;
  color: $text-muted-color;
  display: block;
  margin: 0;
  padding: $padding-vert-base 0;
  width: 100%;
}

label {
  display: inline-block;
  font-weight: $font-weight-bold;
  margin-bottom: $padding-vert-base;

  &[required]:after {
    content: "*";
    color: $color-danger;
    display: inline-block;
    text-align: center;
    width: 1em;
  }
}

.form-group {
  margin-bottom: $leading / 2;
}

// Controls
// ----------------------------------------------------------------------------

// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls: select, textarea, input (types = text,
// password, datetime, datetime-local, date, month, time, week, number, email,
// url, search, tel, color)

.control {
  @include placeholder();
  background-color: $input-bg;
  background-image: none;
  border-radius: $input-border-radius;
  border: $input-border-size solid $input-border-color;
  box-shadow: $input-box-shadow;
  color: $input-color;
  display: block;
  height: u($input-height, rem);
  margin: 0;
  padding: $padding-vert-base $padding-horiz-base;
  transition: border-color $easing-base $timing-base;

  &:focus {
    border-color: $input-border-focus;
    outline: thin dotted \9; // IE6â€“9
    outline: 0;
  }

  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}

// Radios and checkboxes
// ----------------------------------------------------------------------------

.radio,
.checkbox {
  cursor: pointer;
  display: block;
  font-weight: normal;
  margin: 0;
  vertical-align: middle;

  input[type="radio"],
  input[type="checkbox"] {
    margin: 0 .35em 0 0; // add some space between input and label
  }
}

.radio-inline,
.checkbox-inline {
  display: inline-block;

  // Space out consecutive inline controls
  + .radio-inline,
  + .checkbox-inline {
    margin-left: .5em;
  }
}

// Apply same disabled cursor tweak as for inputs
// Note: Neither radios nor checkboxes can be readonly.
.radio,
.checkbox,
input[type="radio"],
input[type="checkbox"], {
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}

// Layouts
// ----------------------------------------------------------------------------

// Inline form
.form-inline {
  .control {
    display: inline-block;
  }
}

// Horizontal form
// Defaults to stacked version on smaller screens
.form-horizontal {
  @include breakpoint($grid-break) {
    .control {
      display: inline-block;
      margin-bottom: 0;
    }

    label {
      float: left;
      line-height: $input-height;
      margin-right: 1em;
      vertical-align: middle;
      width: $form-horiz-label-width;
    }

    .form-controls {
      margin-left: $form-horiz-label-width + 1em;

      label {
        display: block;
        float: none;
        width: auto;
      }
    }
  }
}

// Grouped form
.form-grouped {
  .control {
    border-radius: 0;
    display: block;

    &:first-child {
      border-radius: $input-border-radius $input-border-radius 0 0;
      top: 1px;
    }

    &:last-child {
      border-radius: 0 0 $input-border-radius $input-border-radius;
    }
  }
}

// Help text
// ----------------------------------------------------------------------------

.form-help {
  color: $gray-light;
}

// All this is is left-flaoted text with a state color
// <span class="text-inline">
.form-help-inline {
  @extend .form-help;
  display: inline-block;
  margin-left: .5em;
}

// Validation
// ----------------------------------------------------------------------------

.has-success {
  @include form-control-validation($color-success, $color-success, $color-success-bg);
}

.has-warning {
  @include form-control-validation($color-warning, $color-warning, $color-warning-bg);
}

.has-error {
  @include form-control-validation($color-danger, $color-danger, $color-danger-bg);
}

// Sizing
// ----------------------------------------------------------------------------

// States
// ----------------------------------------------------------------------------

// Normalize specific inputs
// ----------------------------------------------------------------------------

// Some basic normalization is required to ensure optimum display with or
// without those classes to better address browser inconsistencies.

// Search
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.
// Override content-box in Normalize (* isn't specific enough)

input[type="search"] {
  -webkit-appearance: none;
  box-sizing: border-box;
}

// File
// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;

  &:focus {
    @include tab-focus();
  }
}

// Range
// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Select
// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Textarea
// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}

// Date
// In Mobile Safari, date inputs require a pixel line-height that matches the
// given height of the input.
input[type="date"] {
  line-height: $input-height;
}

// Checkboxes & Radios
// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  @include tab-focus();
  margin: 4px 0 0;
  margin-top: 1px \9; /* IE8-9 */
  line-height: normal;
}
