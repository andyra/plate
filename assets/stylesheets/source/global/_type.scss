
// Title:      Type settings
// Version:    0.0.1
// Author:     Andy Smith
// Source:     http://github/com/andyra/proto

// @todo: lists: http://j.eremy.net/align-lists-flush-left/

// Font families
// ----------------------------------------------------------------------------

$font-family-sans:        $helvetica !default;
$font-family-serif:       $georgia !default;
$font-family-monospace:   $monospace !default;

$font-family-base:        $font-family-sans !default;
$font-family-heading:     $font-family-base !default;

// Custom fonts
//
// To create custom fonts, uncomment the `font-face` mixin below and fill with
// the information specific to your font. You can then add your custom font
// family name in front of the font stacks above to allow for fallbacks in the
// event the font files don't load in old browsers. Add as many custom fonts
// here as you see fit.
// @source: http://bourbon.io/docs/#font-face

// @include font-face($font-family, $file-path, $weight: normal, $style: normal)

// Type scale
// ----------------------------------------------------------------------------

// A note on measurement units:
// • Use percentages for structural elements (sidebars, headers, footers, etc.).
// • Use rems or ems for type.
// • Use ems for type-related properties (like margins, padding) so they scale
//   with the type size.
// • Use unitless values for line-height.
// @source: http://csswizardry.com/2011/12/measuring-and-sizing-uis-2011-style/
// @source: http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/

// $font-size-base is the default size for body text (paragraphs, lists, etc.).
// Set to at least 16 in most situations.
// @source: http://ia.net/blog/100e2r
// @todo: for some reason, the rem mixin isn't returning pixel values
// when the font-size-base is in rems. Has something to do with the
// variables (-xxl, etc.) below.

$type-unit:                 rem;
$font-size-base:            18; // A unitless pixel value. This is what 1rem or 1 em will equal
$font-size-root:            ($font-size-base / 16 * 100)#{"%"}; // Used to set the base HTML font size %
$type-ratio:                $perfect-fourth;

// These should just be numbers without units. 18 or 1.8
// We can use these unitless values to

$font-size-xxxl:            type-scale(4) !default;
$font-size-xxl:             type-scale(3) !default;
$font-size-xl:              type-scale(2) !default;
$font-size-lg:              type-scale(1) !default;
$font-size-md:              type-scale(0) !default;
$font-size-sm:              type-scale(-1) !default;
$font-size-xs:              type-scale(-2) !default;

// Line height
// ----------------------------------------------------------------------------


// Weights
// ----------------------------------------------------------------------------

$font-weight-thin:        100 !default;
$font-weight-light:       300 !default;
$font-weight-normal:      400 !default;
$font-weight-medium:      500 !default;
$font-weight-bold:        700 !default;
$font-weight-black:       900 !default;

// Colors
// ----------------------------------------------------------------------------

$text-color:              $gray-dark !default;
$heading-color:           $gray-dark !default;


































// Browser support
// ----------------------------------------------------------------------------

// @source: http://davidwalsh.name/rem-px-browser-function-sass source:
// @http://csswizardry.com/2011/12/measuring-and-sizing-uis-2011-style/

// So I guess the thing to remember is that ems allow stuff to scale wrt the font
// size. So if you zoom in, the margins, padding, etc will stay in proportion.
// This is especially useful for stuff like indenting and margins on lists

// OK, so in media queries, for instance, all we have to do is set the HTML font
// size and everything will adjust. That's pretty awesome.

// PX and REM can be used for consistent padding and margins. EM and percent will
// have inconsistent margins, based on the parent. That's actually why em / %
// is good for layout; you want those to change based on the browser width
// @source: http://j.eremy.net/confused-about-rem-and-em/
// @tool: http://pxtoem.com/

// 1. Use functions
//    - Two css files (styles.css, styles.ie.css). If you don't create a
//      separate css file, the main one can be modern only or use px/em
//    - If you ever want to remove support for IE8, you can just remove one file
//      and that's it.
// 2. Use mixins
//    - Single css file (styles.css)
//    - More unorganized, maybe.

/*

// If using px, em
code {
  font-size: $font-size-sm;
  padding: rem(2px, 4px);
}

// If using rem
code {
  @include font-size($font-size-sm);
  @include padding(2px 4px);
}

*/

// Font sizing
// ----------------------------------------------------------------------------



// A word on accessibility
// @source: http://negativitysandwiches.com/accessibility-and-building-a-web-for-everyone-because-sometimes-its-not-all-about-us/

// Font sizes are our basis for modular measurement
// The first ingredient is the base font size. The ratio is the second ingredient. Text size, width, and line height work from the same modular scale to create a nice text block.
// @source: http://alistapart.com/article/more-meaningful-typography
// @source: http://modularscale.com




// Line height
// ----------------------------------------------------------------------------

// @todo: Body line height should change based on how wide the content is.
// @source: http://www.pearsonified.com/typography/

// Some general rules for leading:
// - with continuous copy, use large leading;
// - with light text on dark background, use large leading;
// - with long line lengths, use large leading;
// - with large x-height, use large leading;
// - with short burst of information, use small leading.
// @source: http://coding.smashingmagazine.com/2011/03/14/technical-web-typography-guidelines-and-techniques/#tt-rhythm

// A note on line lengths: shoot for 45-75 characters per line.
// @source: http://www.inkwell.ie/typography/bringhurst.html
// For a longer measure (larger screens), use slightly greater leading.
// For a shorter measure (smaller screens), use slightly smaller leading.

$line-height-base:          $golden-ratio !default;     // Unitless. Based on the font size of the element (16 * 1.5 = 24)
$line-height-computed:      type-unit($font-size-base * $line-height-base) !default;



