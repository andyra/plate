
// Title:      Vertical Rhythm
// Version:    0.12.2
// Author:     Compass
// Source:     https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/typography/_vertical_rhythm.scss



// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.

// @todo:
// @include type-scale($font-size-md);
// font-size: size;
// line-height: height; // must be unitless
// Make sure this can work with REM fallbacks, too
// $rem-fallback: true !default;
// Make sure the line-height is unitless

@mixin type-scale(
  $to-size,
  $lines: lines-for-font-size($to-size),
  $from-size: $font-size-base
) {

  @if absolute_unit($font-size-base) and $from-size != $font-size-base {
    @warn "$font-size-base is in pixels but a relative font size was passed to type-scale";
  }

  font-size: $font-size-base * $to-size / $from-size;

  @if absolute-unit($font-size-base) {
    line-height: leading($lines, $font-size-base);
  }
  @else {
    line-height: leading($lines, $to-size);
  }
}




// Calculate leading units.
@function leading(
  $lines: 1,
  $font-size: $font-size-base,
  $offset: 0
) {
  @if absolute-unit($font-size-base) and $font-size != $font-size-base {
    @warn "$font-size-base is in pixels but a relative font size was passed to the rhythm function";
  }

  $rhythm: $font-size-base * ($lines * $line-height-base - $offset) / $font-size;

  // Round the pixels down to nearest integer.
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}



// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
  $lines: if($round-to-nearest-half-line,
              ceil(2 * $font-size / $line-height-base) / 2,
              ceil($font-size / $line-height-base));
  @if $lines * $line-height-base - $font-size < $min-line-padding * 2 {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}
