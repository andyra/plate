
// Title:      Vertical Rhythm
// Version:    0.12.2
// Author:     Compass
// Source:     https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/typography/_vertical_rhythm.scss

// Functions
// ----------------------------------------------------------------------------

// Calculate leading units to create a consistent vertical rhythm.
// $lines: how many multiples of the baseline rhythm the text should use up.
// $font-size: The size of the type you're working with
// $offset: not sure?

@function leading(
  $lines: 1,
  $font-size: $font-size-base,
  $offset: 0
) {
  @if unit($font-size-base) == "px" and $font-size != $font-size-base {
    @warn "$font-size-base is in pixels but a relative font size was passed to the rhythm function";
  }

  $leading: $font-size-base * ($lines * $line-height-base - $offset) / $font-size;

  // Round the pixels down to nearest integer.
  @if unit($leading) == px {
    $leading: floor($leading);
  }
  @return $leading;
}

// Calculate the minimum multiple of rhythm units
// needed to contain the font-size.

@function lines-for-font-size($font-size) {
  $font-size: strip-unit($font-size);
  $lines: if($round-to-nearest-half-line,
              ceil(2 * $font-size / $line-height-base) / 2,
              ceil($font-size / $line-height-base));
  @if $lines * $line-height-base - $font-size < $min-line-padding * 2 {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}

// Mixins
// ----------------------------------------------------------------------------

// Calculate leading units for consistent vertical rhythm and automatically
// create properties using this calculated value. Possible properties include:
// margin, padding, line-height, height, width, max-height/width, etc.

// You will need to include the $base param if the property is calculated from
// the font's size (unitless line-heights, for example), or if your $font-size-
// base unit is in ems or % (since those are both relative to the font size).

@mixin leading(
  $property,
  $lines: 1,
  $base: $font-size-base,
  $offset: 0
) {
  @if absolute-unit($font-size-base) and $base != $font-size-base {
    @warn "$font-size-base is in pixels but a relative font size was passed to the rhythm function";
  }

  // Unitless values
  @if $property == 'line-height' {
    line-height: leading($lines, $base, $offset);
  }
  @else {
    $values: ();
    @each $line in $lines {
      // Here we need to make sure we are using the correct units (rem, em,
      // etc.) since the rem() mixin expects values with units. This works for
      // em and rem, but px needs to be multiplied
      $leading: leading($line, $base, $offset);
      $values: append($values, rel-to-px($leading));
    }

    @include rem-fallback($property, $values);
  }
}

// Adjust a block to have a different font size and line height to maintain
// vertical rhythm.
// $font-size: (required): the size you want the text to end up.
// $lines: how many multiples of the baseline rhythm the text should use up.
// It defaults to the smallest integer large enough to fit the font.
// $base: adjust from a font-size other than the base font-size (for ems).

@mixin type-scale(
  $font-size,
  $lines: lines-for-font-size($font-size),
  $base: $font-size-base
) {

  @if absolute_unit($font-size-base) and $base != $font-size-base {
    @warn "$font-size-base is in pixels but a relative font size was passed to type-scale";
  }

  // Set font-size
  @include rem-fallback(font-size, ($font-size-base * $font-size / $base), $base);

  // Set line-height
  @if absolute-unit($font-size-base) {
    line-height: leading($lines, $font-size-base);
  }
  @else {
    line-height: leading($lines, $font-size);
  }
}

// Aliases and shortcuts
// ----------------------------------------------------------------------------

// We could use the leading mixin for margin and padding, but it will me much
// easier to read our SASS if we use the aliases below.

@mixin margin($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(margin, $lines, $base, $offset);
}

@mixin margin-top($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(margin-top, $lines, $base, $offset);
}

@mixin margin-right($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(margin-right, $lines, $base, $offset);
}

@mixin margin-left($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(margin-left, $lines, $base, $offset);
}

@mixin margin-bottom($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(margin-bottom, $lines, $base, $offset);
}

@mixin padding($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(padding, $lines, $base, $offset);
}

@mixin padding-top($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(padding-top, $lines, $base, $offset);
}

@mixin padding-right($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(padding-right, $lines, $base, $offset);
}

@mixin padding-left($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(padding-left, $lines, $base, $offset);
}

@mixin padding-bottom($lines: 1, $base: $font-size-base, $offset: 0) {
  @include leading(padding-bottom, $lines, $base, $offset);
}

// Borders
// ----------------------------------------------------------------------------

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border. Also,
// the $width value must be in the same unit as $font-size-base

@mixin apply-side-rhythm-border($side, $width: 1px, $lines: 1, $font-size: $font-size-base, $border-style: $default-border-style) {
  @if not relative-unit($font-size-base) and $font-size != $font-size-base {
    @warn "relative-unit($font-size-base) is false but a relative font size was passed to apply-side-rhythm-border";
  }

  border-#{$side}: {
    style: $border-style;
    width: $font-size-base * $width / $font-size;
  };
  padding-#{$side}: leading($lines, $font-size, $offset: $width);
}

// Apply borders and whitespace equally to all sides.
@mixin rhythm-borders($width: 1px, $lines: 1, $font-size: $font-size-base, $border-style: $default-border-style) {
  @if not relative-unit($font-size-base) and $font-size != $font-size-base {
    @warn "relative-unit($font-size-base) is false but a relative font size was passed to rhythm-borders";
  }

  border: {
    style: $border-style;
    width: $font-size-base * $width / $font-size;
  };
  padding: leading($lines, $font-size, $offset: $width);
}

// Apply a leading border.
@mixin border-top($width: 1px, $lines: 1, $font-size: $font-size-base, $border-style: $default-border-style) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

// Apply a trailing border.
@mixin border-bottom($width: 1px, $lines: 1, $font-size: $font-size-base, $border-style: $default-border-style) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

// Apply both leading and trailing borders.
@mixin borders-horizontal($width: 1px, $lines: 1, $font-size: $font-size-base, $border-style: $default-border-style) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}
